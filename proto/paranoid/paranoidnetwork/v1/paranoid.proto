// ParanoidNetwork API v0.3.0

syntax = "proto3";

package paranoid.paranoidnetwork.v1;

option go_package = "github.com/cpssd-students/paranoid/proto/paranoid/paranoidnetwork;paranoidnetwork";

service ParanoidNetworkService {
    // Utility calls

   	// Used for health checking and discovery. Sends the IP and port of the
    // PFSD instance running on the client.
    rpc Ping (PingRequest) returns (PingResponse);
    // Used by a new node to let other nodes it is available to join the cluster.
    rpc JoinCluster (JoinClusterRequest) returns (JoinClusterResponse) {}
    // Used by a new node to create a new key generation before joining the cluster.
    rpc NewGeneration (NewGenerationRequest) returns (NewGenerationResponse) {}

    // Cryptography calls
    rpc SendKeyPiece (SendKeyPieceRequest) returns (SendKeyPieceResponse) {}
    rpc RequestKeyPiece (RequestKeyPieceRequest) returns (RequestKeyPieceResponse) {}
}

message PingRequest {
    Node node = 1;
}

message PingResponse {}

message Node {
    string ip = 1;  // required
    string port = 2;  // required
    string common_name = 3; // required
    string uuid = 4; // required
}

message JoinClusterRequest {
    string ip = 1;  // required
    string port = 2;  // required
    string common_name = 3; // required
    string uuid = 4; // required

    string pool_password = 5; // optional
}

message JoinClusterResponse {}

message NewGenerationRequest {
    Node requesting_node = 1;   // required
    string pool_password = 2;   // required
}

message NewGenerationResponse {
    int64 generation_number = 1;    // required
    repeated string peers = 2;        // required
}

message SendKeyPieceRequest {
    KeyPiece key = 1; // required
    bool add_element = 2; // required
}

message SendKeyPieceResponse {
    bool client_must_commit = 1;    // required
}

message RequestKeyPieceRequest {
    Node node = 1; // required
    int64 generation = 2; // required    
}

message RequestKeyPieceResponse {
    KeyPiece key = 1; // required
}

message KeyPiece {
    bytes data = 1; // required
    bytes parent_fingerprint = 2; // required
    bytes prime = 3; // required
    int64 seq = 4; // required

    // The Node data for the node who owns this KeyPiece
    Node owner_node = 5; // required

    // The KeyStateMachine generation this key belongs to
    int64 generation = 6;   // required
}
