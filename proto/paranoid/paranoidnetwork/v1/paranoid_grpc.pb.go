// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: paranoid/paranoidnetwork/v1/paranoid.proto

package paranoidnetwork

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParanoidNetworkServiceClient is the client API for ParanoidNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParanoidNetworkServiceClient interface {
	// Used for health checking and discovery. Sends the IP and port of the
	// PFSD instance running on the client.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Used by a new node to let other nodes it is available to join the cluster.
	JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error)
	// Used by a new node to create a new key generation before joining the cluster.
	NewGeneration(ctx context.Context, in *NewGenerationRequest, opts ...grpc.CallOption) (*NewGenerationResponse, error)
	// Cryptography calls
	SendKeyPiece(ctx context.Context, in *SendKeyPieceRequest, opts ...grpc.CallOption) (*SendKeyPieceResponse, error)
	RequestKeyPiece(ctx context.Context, in *RequestKeyPieceRequest, opts ...grpc.CallOption) (*RequestKeyPieceResponse, error)
}

type paranoidNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParanoidNetworkServiceClient(cc grpc.ClientConnInterface) ParanoidNetworkServiceClient {
	return &paranoidNetworkServiceClient{cc}
}

func (c *paranoidNetworkServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkServiceClient) JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error) {
	out := new(JoinClusterResponse)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkServiceClient) NewGeneration(ctx context.Context, in *NewGenerationRequest, opts ...grpc.CallOption) (*NewGenerationResponse, error) {
	out := new(NewGenerationResponse)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/NewGeneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkServiceClient) SendKeyPiece(ctx context.Context, in *SendKeyPieceRequest, opts ...grpc.CallOption) (*SendKeyPieceResponse, error) {
	out := new(SendKeyPieceResponse)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/SendKeyPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkServiceClient) RequestKeyPiece(ctx context.Context, in *RequestKeyPieceRequest, opts ...grpc.CallOption) (*RequestKeyPieceResponse, error) {
	out := new(RequestKeyPieceResponse)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/RequestKeyPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParanoidNetworkServiceServer is the server API for ParanoidNetworkService service.
// All implementations must embed UnimplementedParanoidNetworkServiceServer
// for forward compatibility
type ParanoidNetworkServiceServer interface {
	// Used for health checking and discovery. Sends the IP and port of the
	// PFSD instance running on the client.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Used by a new node to let other nodes it is available to join the cluster.
	JoinCluster(context.Context, *JoinClusterRequest) (*JoinClusterResponse, error)
	// Used by a new node to create a new key generation before joining the cluster.
	NewGeneration(context.Context, *NewGenerationRequest) (*NewGenerationResponse, error)
	// Cryptography calls
	SendKeyPiece(context.Context, *SendKeyPieceRequest) (*SendKeyPieceResponse, error)
	RequestKeyPiece(context.Context, *RequestKeyPieceRequest) (*RequestKeyPieceResponse, error)
	mustEmbedUnimplementedParanoidNetworkServiceServer()
}

// UnimplementedParanoidNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParanoidNetworkServiceServer struct {
}

func (UnimplementedParanoidNetworkServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedParanoidNetworkServiceServer) JoinCluster(context.Context, *JoinClusterRequest) (*JoinClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedParanoidNetworkServiceServer) NewGeneration(context.Context, *NewGenerationRequest) (*NewGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGeneration not implemented")
}
func (UnimplementedParanoidNetworkServiceServer) SendKeyPiece(context.Context, *SendKeyPieceRequest) (*SendKeyPieceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyPiece not implemented")
}
func (UnimplementedParanoidNetworkServiceServer) RequestKeyPiece(context.Context, *RequestKeyPieceRequest) (*RequestKeyPieceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestKeyPiece not implemented")
}
func (UnimplementedParanoidNetworkServiceServer) mustEmbedUnimplementedParanoidNetworkServiceServer() {
}

// UnsafeParanoidNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParanoidNetworkServiceServer will
// result in compilation errors.
type UnsafeParanoidNetworkServiceServer interface {
	mustEmbedUnimplementedParanoidNetworkServiceServer()
}

func RegisterParanoidNetworkServiceServer(s grpc.ServiceRegistrar, srv ParanoidNetworkServiceServer) {
	s.RegisterService(&ParanoidNetworkService_ServiceDesc, srv)
}

func _ParanoidNetworkService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetworkService_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServiceServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServiceServer).JoinCluster(ctx, req.(*JoinClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetworkService_NewGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServiceServer).NewGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/NewGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServiceServer).NewGeneration(ctx, req.(*NewGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetworkService_SendKeyPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKeyPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServiceServer).SendKeyPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/SendKeyPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServiceServer).SendKeyPiece(ctx, req.(*SendKeyPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetworkService_RequestKeyPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeyPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServiceServer).RequestKeyPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetworkService/RequestKeyPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServiceServer).RequestKeyPiece(ctx, req.(*RequestKeyPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParanoidNetworkService_ServiceDesc is the grpc.ServiceDesc for ParanoidNetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParanoidNetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paranoid.paranoidnetwork.v1.ParanoidNetworkService",
	HandlerType: (*ParanoidNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ParanoidNetworkService_Ping_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _ParanoidNetworkService_JoinCluster_Handler,
		},
		{
			MethodName: "NewGeneration",
			Handler:    _ParanoidNetworkService_NewGeneration_Handler,
		},
		{
			MethodName: "SendKeyPiece",
			Handler:    _ParanoidNetworkService_SendKeyPiece_Handler,
		},
		{
			MethodName: "RequestKeyPiece",
			Handler:    _ParanoidNetworkService_RequestKeyPiece_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paranoid/paranoidnetwork/v1/paranoid.proto",
}
