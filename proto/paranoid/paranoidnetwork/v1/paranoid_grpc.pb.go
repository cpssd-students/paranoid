// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: paranoid/paranoidnetwork/v1/paranoid.proto

package paranoidnetwork

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParanoidNetworkClient is the client API for ParanoidNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParanoidNetworkClient interface {
	// Used for health checking and discovery. Sends the IP and port of the
	// PFSD instance running on the client.
	Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Used by a new node to let other nodes it is available to join the cluster.
	JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Used by a new node to create a new key generation before joining the cluster.
	NewGeneration(ctx context.Context, in *NewGenerationRequest, opts ...grpc.CallOption) (*NewGenerationResponse, error)
	// Cryptography calls
	SendKeyPiece(ctx context.Context, in *KeyPieceSend, opts ...grpc.CallOption) (*SendKeyPieceResponse, error)
	RequestKeyPiece(ctx context.Context, in *KeyPieceRequest, opts ...grpc.CallOption) (*KeyPiece, error)
}

type paranoidNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewParanoidNetworkClient(cc grpc.ClientConnInterface) ParanoidNetworkClient {
	return &paranoidNetworkClient{cc}
}

func (c *paranoidNetworkClient) Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetwork/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetwork/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) NewGeneration(ctx context.Context, in *NewGenerationRequest, opts ...grpc.CallOption) (*NewGenerationResponse, error) {
	out := new(NewGenerationResponse)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetwork/NewGeneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) SendKeyPiece(ctx context.Context, in *KeyPieceSend, opts ...grpc.CallOption) (*SendKeyPieceResponse, error) {
	out := new(SendKeyPieceResponse)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetwork/SendKeyPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) RequestKeyPiece(ctx context.Context, in *KeyPieceRequest, opts ...grpc.CallOption) (*KeyPiece, error) {
	out := new(KeyPiece)
	err := c.cc.Invoke(ctx, "/paranoid.paranoidnetwork.v1.ParanoidNetwork/RequestKeyPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParanoidNetworkServer is the server API for ParanoidNetwork service.
// All implementations must embed UnimplementedParanoidNetworkServer
// for forward compatibility
type ParanoidNetworkServer interface {
	// Used for health checking and discovery. Sends the IP and port of the
	// PFSD instance running on the client.
	Ping(context.Context, *Node) (*EmptyMessage, error)
	// Used by a new node to let other nodes it is available to join the cluster.
	JoinCluster(context.Context, *JoinClusterRequest) (*EmptyMessage, error)
	// Used by a new node to create a new key generation before joining the cluster.
	NewGeneration(context.Context, *NewGenerationRequest) (*NewGenerationResponse, error)
	// Cryptography calls
	SendKeyPiece(context.Context, *KeyPieceSend) (*SendKeyPieceResponse, error)
	RequestKeyPiece(context.Context, *KeyPieceRequest) (*KeyPiece, error)
	mustEmbedUnimplementedParanoidNetworkServer()
}

// UnimplementedParanoidNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedParanoidNetworkServer struct {
}

func (UnimplementedParanoidNetworkServer) Ping(context.Context, *Node) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedParanoidNetworkServer) JoinCluster(context.Context, *JoinClusterRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedParanoidNetworkServer) NewGeneration(context.Context, *NewGenerationRequest) (*NewGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGeneration not implemented")
}
func (UnimplementedParanoidNetworkServer) SendKeyPiece(context.Context, *KeyPieceSend) (*SendKeyPieceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyPiece not implemented")
}
func (UnimplementedParanoidNetworkServer) RequestKeyPiece(context.Context, *KeyPieceRequest) (*KeyPiece, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestKeyPiece not implemented")
}
func (UnimplementedParanoidNetworkServer) mustEmbedUnimplementedParanoidNetworkServer() {}

// UnsafeParanoidNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParanoidNetworkServer will
// result in compilation errors.
type UnsafeParanoidNetworkServer interface {
	mustEmbedUnimplementedParanoidNetworkServer()
}

func RegisterParanoidNetworkServer(s grpc.ServiceRegistrar, srv ParanoidNetworkServer) {
	s.RegisterService(&ParanoidNetwork_ServiceDesc, srv)
}

func _ParanoidNetwork_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetwork/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).Ping(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetwork/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).JoinCluster(ctx, req.(*JoinClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_NewGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).NewGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetwork/NewGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).NewGeneration(ctx, req.(*NewGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_SendKeyPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPieceSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).SendKeyPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetwork/SendKeyPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).SendKeyPiece(ctx, req.(*KeyPieceSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_RequestKeyPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).RequestKeyPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.paranoidnetwork.v1.ParanoidNetwork/RequestKeyPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).RequestKeyPiece(ctx, req.(*KeyPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParanoidNetwork_ServiceDesc is the grpc.ServiceDesc for ParanoidNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParanoidNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paranoid.paranoidnetwork.v1.ParanoidNetwork",
	HandlerType: (*ParanoidNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ParanoidNetwork_Ping_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _ParanoidNetwork_JoinCluster_Handler,
		},
		{
			MethodName: "NewGeneration",
			Handler:    _ParanoidNetwork_NewGeneration_Handler,
		},
		{
			MethodName: "SendKeyPiece",
			Handler:    _ParanoidNetwork_SendKeyPiece_Handler,
		},
		{
			MethodName: "RequestKeyPiece",
			Handler:    _ParanoidNetwork_RequestKeyPiece_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paranoid/paranoidnetwork/v1/paranoid.proto",
}
