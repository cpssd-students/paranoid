// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/discoverynetwork/discovery.proto

package discoverynetwork

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryNetworkClient is the client API for DiscoveryNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryNetworkClient interface {
	// Discovery Calls
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type discoveryNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryNetworkClient(cc grpc.ClientConnInterface) DiscoveryNetworkClient {
	return &discoveryNetworkClient{cc}
}

func (c *discoveryNetworkClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/discoverynetwork.DiscoveryNetwork/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryNetworkClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/discoverynetwork.DiscoveryNetwork/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryNetworkServer is the server API for DiscoveryNetwork service.
// All implementations must embed UnimplementedDiscoveryNetworkServer
// for forward compatibility
type DiscoveryNetworkServer interface {
	// Discovery Calls
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Disconnect(context.Context, *DisconnectRequest) (*EmptyMessage, error)
	mustEmbedUnimplementedDiscoveryNetworkServer()
}

// UnimplementedDiscoveryNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryNetworkServer struct {
}

func (UnimplementedDiscoveryNetworkServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedDiscoveryNetworkServer) Disconnect(context.Context, *DisconnectRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedDiscoveryNetworkServer) mustEmbedUnimplementedDiscoveryNetworkServer() {}

// UnsafeDiscoveryNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryNetworkServer will
// result in compilation errors.
type UnsafeDiscoveryNetworkServer interface {
	mustEmbedUnimplementedDiscoveryNetworkServer()
}

func RegisterDiscoveryNetworkServer(s grpc.ServiceRegistrar, srv DiscoveryNetworkServer) {
	s.RegisterService(&DiscoveryNetwork_ServiceDesc, srv)
}

func _DiscoveryNetwork_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryNetworkServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoverynetwork.DiscoveryNetwork/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryNetworkServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryNetwork_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryNetworkServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoverynetwork.DiscoveryNetwork/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryNetworkServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscoveryNetwork_ServiceDesc is the grpc.ServiceDesc for DiscoveryNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoveryNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discoverynetwork.DiscoveryNetwork",
	HandlerType: (*DiscoveryNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _DiscoveryNetwork_Join_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _DiscoveryNetwork_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discoverynetwork/discovery.proto",
}
